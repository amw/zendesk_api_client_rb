#!/usr/bin/env ruby
require 'rubygems'
require 'zendesk'
require 'irb'
require 'optparse'

class Zendesk::Collection
  alias :/ :find
end

module ZendeskConsole
  def client(&blk)
    return @client if @client && blk.nil?

    @client = Zendesk.configure do |cfg|
      config.each do |k,v|
        cfg.send("#{k}=", v)
      end if config.keys.any?
      blk.call(cfg) unless blk.nil?
    end
  end

  def username(username)
    client.config.username = username
  end

  def password(password)
    client.config.password = password
  end

  def basic_auth(username, password)
    username(username)
    password(password)
    true
  end

  def url(url)
    client.config.url = url
  end

  %w(get post put delete).each do |verb|
    define_method verb do |*args|
      client.connection.send(verb, *args)
    end
  end

  def cd(new_path)
    if new_path.class.to_s =~ /^Zendesk/      
      @path = new_path
    end
  end

  def cwd
    path
  end

  def ls
    path.public_methods(false)
  end

  def method_missing(*args)
    path.send(*args)
  end

  def config
    @options ||= {}
  end

  private

  def path
    @path || client
  end
end

extend ZendeskConsole

begin
  OptionParser.new do |opts|
    opts.banner = "Usage: zendesk_console.rb [options]"

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      config["log"] = v
    end

    opts.on("-c", "--config FILE", "Load a config file") do |c|
      config.replace(YAML.load(File.read(c)))
    end

    opts.on("-u", "--username USER", "Sets basic auth username") do |u|
      config["username"] = u
    end

    opts.on("-p", "--password PASS", "Sets basic auth password") do |p|
      config["password"] = p
    end

    opts.on("-a", "--api URL", "Sets api url") do |a|
      config["url"] = a
    end

    opts.on("-r", "--[no-]retry", "Retry rate-limited requests automatically") do |r|
      config["retry"] = r
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    opts.on_tail("--version", "Show version") do
      puts Zendesk::VERSION 
      exit
    end
  end.parse!
rescue OptionParser::MissingArgument => e
  puts e.message
  exit
end

ARGV.clear
IRB.start(__FILE__)
